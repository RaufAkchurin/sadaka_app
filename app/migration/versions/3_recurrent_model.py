"""recurrent model

Revision ID: f44b04f290eb
Revises: f752100ac238
Create Date: 2025-10-23 12:10:07.882642

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'f44b04f290eb'
down_revision: Union[str, None] = 'f752100ac238'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('recurringpayments',
    sa.Column('provider', sa.Enum('YOOKASSA', 'TBANK', name='recurring_payment_provider_enum'), nullable=False),
    sa.Column('provider_rebill_id', sa.String(), nullable=False),
    sa.Column('provider_card_id', sa.String(), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'PENDING', 'PAUSED', 'PAST_DUE', 'FAILED', 'CANCELED', name='recurring_payment_status_enum'), nullable=False),
    sa.Column('payment_method', sa.Enum('CARD', 'SBP', name='payment_method_enum'), nullable=False),
    sa.Column('interval', sa.Enum('DAILY', 'WEEKLY', 'MONTHLY', name='recurring_payment_interval_enum'), nullable=False),
    sa.Column('amount', sa.Float(), nullable=True),
    sa.Column('timezone', sa.String(length=64), nullable=False),
    sa.Column('next_charge_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('last_charge_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_attempt_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('processing_task_id', sa.String(length=128), nullable=True),
    sa.Column('locked_until', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_error', sa.Text(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('stage_id', sa.Integer(), nullable=True),
    sa.Column('referral_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('fk_recurringpayments_project_id_projects')),
    sa.ForeignKeyConstraint(['referral_id'], ['referrals.id'], name='fk_recurring_payments_referral_id'),
    sa.ForeignKeyConstraint(['stage_id'], ['stages.id'], name=op.f('fk_recurringpayments_stage_id_stages')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_recurringpayments_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_recurringpayments')),
    sa.UniqueConstraint('provider', 'provider_rebill_id', name='uq_recurring_payments_provider_rebill_id')
    )
    op.create_index(op.f('ix_recurringpayments_next_charge_at'), 'recurringpayments', ['next_charge_at'], unique=False)
    op.create_index(op.f('ix_recurringpayments_payment_method'), 'recurringpayments', ['payment_method'], unique=False)
    op.create_index(op.f('ix_recurringpayments_processing_task_id'), 'recurringpayments', ['processing_task_id'], unique=False)
    op.create_index(op.f('ix_recurringpayments_project_id'), 'recurringpayments', ['project_id'], unique=False)
    op.create_index(op.f('ix_recurringpayments_provider'), 'recurringpayments', ['provider'], unique=False)
    op.create_index(op.f('ix_recurringpayments_referral_id'), 'recurringpayments', ['referral_id'], unique=False)
    op.create_index(op.f('ix_recurringpayments_stage_id'), 'recurringpayments', ['stage_id'], unique=False)
    op.create_index(op.f('ix_recurringpayments_status'), 'recurringpayments', ['status'], unique=False)
    op.create_index(op.f('ix_recurringpayments_user_id'), 'recurringpayments', ['user_id'], unique=False)
    op.add_column('payments', sa.Column('payment_method', sa.Enum('CARD', 'SBP', name='payment_method_enum'), server_default='CARD', nullable=False))
    op.add_column('payments', sa.Column('recurring_payment_id', sa.Integer(), nullable=True))
    op.create_index(op.f('ix_payments_payment_method'), 'payments', ['payment_method'], unique=False)
    op.create_index(op.f('ix_payments_recurring_payment_id'), 'payments', ['recurring_payment_id'], unique=False)
    op.create_foreign_key('fk_payments_recurring_payment_id', 'payments', 'recurringpayments', ['recurring_payment_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('fk_payments_recurring_payment_id', 'payments', type_='foreignkey')
    op.drop_index(op.f('ix_payments_recurring_payment_id'), table_name='payments')
    op.drop_index(op.f('ix_payments_payment_method'), table_name='payments')
    op.drop_column('payments', 'recurring_payment_id')
    op.drop_column('payments', 'payment_method')
    op.drop_index(op.f('ix_recurringpayments_user_id'), table_name='recurringpayments')
    op.drop_index(op.f('ix_recurringpayments_status'), table_name='recurringpayments')
    op.drop_index(op.f('ix_recurringpayments_stage_id'), table_name='recurringpayments')
    op.drop_index(op.f('ix_recurringpayments_referral_id'), table_name='recurringpayments')
    op.drop_index(op.f('ix_recurringpayments_provider'), table_name='recurringpayments')
    op.drop_index(op.f('ix_recurringpayments_project_id'), table_name='recurringpayments')
    op.drop_index(op.f('ix_recurringpayments_processing_task_id'), table_name='recurringpayments')
    op.drop_index(op.f('ix_recurringpayments_payment_method'), table_name='recurringpayments')
    op.drop_index(op.f('ix_recurringpayments_next_charge_at'), table_name='recurringpayments')
    op.drop_table('recurringpayments')
    # ### end Alembic commands ###
